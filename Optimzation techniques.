Improving GUI lagging or ANR( Application Not Responding): 
--------------------------------------------------------------
As far as Android is concerned, improving performance is generally easiest to do by way of reducing memory consumption rather than raw algorithmic performance.
GC runs are expensive, and avoiding them is key to smooth performance. Also, many inexperienced Android devs simply do too much work on the main thread; 
most app sluggishness isn’t caused by CPU spikes at all, but rather, the fact that these spikes occur on the main thread instead
of a background thread. Using Handlers to shift work off the main thread generally results in much better app performance, and having 
sane a threading model and smart memory allocation generally does much more to increase performance than "tweaking" algorithms for speed.

The main purpose is to separate lengthy or blocking operations from the UI thread by implementing worker threads. Those worker threads 
are implemented by the participants using background services, asynchronous tasks, or threads carefully managed using a Handler.

The most used GUI optimizations are :
- Simplifying views layouts
- Minimizing the number of views used in the screens
- Reducing overdraw 

Having flat UIs and reducing/reusing views (i.e., GUI components extending the View class) is a desired practice because of several reasons such as: 
(i) the Activity.findViewById method has been described by a Google Engineer as an expensive function and the method was detected as an energy greedy API
(ii) overdrawing pixels in the screen is expensive because the GUI components in Android apps are redrawn frequently

Good GUI optimization practices:
- Reusing bitmaps
- Reducing texture pages and frame sizes
- Applying sprite batching
- Reducing screen updates (e.g., “lower draw latency to keep 60 fps”).

Favorite tools for detecting bottlenecks
1. Show GPU overdraw
2. HierarchyViewer 
3. adb shell dumpsys gfxinfo 

If the bottleneck involves graphical performance problems perhaps the app could make use of hardware accelerated functionality or 
change the algorithm to "cheat", i.e. you don’t need to draw every single pixel in an animation. Maybe just skip every second update 
value and the performance will improve and the user will never notice.

Caching is also useful to reducing GUI lagging.
Caching is not only used for local resources (e.g., images or database queries), but also for resources obtained from external 
providers like in a network response. 
- Caching onerous computations/io accesses 
- Caching network responses and images
- Optimise using caches and/or inline functions which are executed more often
- Requesting data only when needed (and use a local cache with timestamps) reduces the number of "big" data requests.

Reducing Memory Bloats :
- Most of the apps developed have memory related issues.Can be solved by image compression techniques, reusing bitmaps and caching.

- Reusing objects,
- Avoiding object instantiations in loops
- Using appropriate data structures
